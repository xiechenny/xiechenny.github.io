<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[XXX^^XXX Blog]]></title>
  <link href="http://xiechenny.github.io/atom.xml" rel="self"/>
  <link href="http://xiechenny.github.io/"/>
  <updated>2014-05-08T16:41:41+08:00</updated>
  <id>http://xiechenny.github.io/</id>
  <author>
    <name><![CDATA[ChennyXIE]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[JAVA程序员从零开始学习C++(1),vim & makefile]]></title>
    <link href="http://xiechenny.github.io/blog/2014/05/08/learning-c-plus-plus-from-scratch1/"/>
    <updated>2014-05-08T15:42:54+08:00</updated>
    <id>http://xiechenny.github.io/blog/2014/05/08/learning-c-plus-plus-from-scratch1</id>
    <content type="html"><![CDATA[<p>作为一个本科期间只系统学过JAVA的程序员，
虽然至今为止多多少少也已经修改并优化过许多基于c++的开源程序，
相关书籍也多多少少看了一些，但终归不成系统。
因为网易实习的c++并linux编程环境需求，
终于决定以greedy snake为例从零开始学习build c++ project ^ ^.</p>

<p>基本思路很简单：
从配置环境开始，学习Makefile编写以及makefile生成工具，
Project的简单编写以及一些语言点tips（
输出基于命令行，学习一下CJ推荐的courses库；
先不做用户交互，直接写自动运行版的贪吃蛇，设计一下算法，最后再加入交互支持）。</p>

<p>于是从零开始！（路线比较长，废话多，各种点都很基础，发现需要分篇了）</p>

<p>第一步，自己配置vim，
参考bbs精华帖，手把手教你把vim配置成IDE
（<a href="http://bbs.sjtu.edu.cn/bbs0an,path,%2Fgroups%2FGROUP_3%2FGNULinux%2FSoftware%2FD95E89182%2FD5277E56B.html">http://bbs.sjtu.edu.cn/bbs0an,path,%2Fgroups%2FGROUP_3%2FGNULinux%2FSoftware%2FD95E89182%2FD5277E56B.html</a> ）
教程比较长，先配置到ctags，
project起步时文件还较少，后面的文件资源管理暂且边写边学习也不会太枯燥。</p>

<!--more-->


<p>【重要tips】配置.vimrc时需要额外注意tab键功能相关的设置,
由于makefile在build target时会根据tab键来识别需要执行的编译命令，
所以在vim中开启一些tab键与空格转换之类的操作，会引起后面make file编写失败！</p>

<p>第二步， 从零开始编写Makefile！
网上的“跟我一起写makefile”一点都不newbie friendly啊有木有，
一上手就是维护一堆.h .c文件，而且与成型的标准Makefile模板也有较大差距。
而直接找的Makefile模板对于beginner来说也太过复杂。
于是先结合一下循序渐进。</p>

<p>首先是最简单的Makefile，就是把g++编译命令直接放到了Makefile文件里，一目了然：</p>

<div>
  <pre><code class='ruby'>:snake
snake : 
    g++ -o greedysnake main.cpp game.cpp game.hpp
clean :
    rm -rf greedysnake</code></pre>
</div>


<p>最终新手简洁渣成果版：</p>

<div>
  <pre><code class='ruby'># source files
SRC =   game.cpp
SRCMAIN = main.cpp
# object files
OBJ =  $(SRC:.cpp=.o)
# compiler
CC  =   g++
# program name
PROG    =   greedysnake
# for developmemt
# CFLAGS
CFLAG = &quot;&quot;

:snake
snake : $(OBJ)
    $(CC) -o $(PROG) $(SRCMAIN) $(OBJ)
%.o : %.cpp %.hpp
    $(CC) -c $(CFLAGS) $&lt;
clean :
    rm -rf *.o $(PROG)</code></pre>
</div>



]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Octopress写多彩的博文]]></title>
    <link href="http://xiechenny.github.io/blog/2014/05/07/how-to-write-a-post/"/>
    <updated>2014-05-07T16:22:17+08:00</updated>
    <id>http://xiechenny.github.io/blog/2014/05/07/how-to-write-a-post</id>
    <content type="html"><![CDATA[<p>关于octopress建立博客小站的教程太多，
其实octopress本身的英文页面就介绍得挺详细的，
问题是一切顺利的广为人知的流程在搭完blog、显示出第一个hello world的simple post之后就结束啦，
怎么帖代码（教怎么高亮代码的倒是很多。。。），怎么贴图，怎么贴表格，怎么加粗加颜色删除线下划线……</p>

<p>&lt;&mdash;&mdash; 咳，吐槽帝的需求的确比较麻烦，不符合hacker大人们的极简脑回路 &ndash; &ndash;|| 。。。
jekyll的英文页面看得实在头大，我几乎都想自己在文本里打&lt;/br&gt; 和 &lt;img&gt;&lt;/img&gt;了，咳。</p>

<p>大概hacker们的思路太跳脱，这种小问题也需要解决么，文本编辑器里自己写去。。。
可是我等懒人实在受不了要么如此朴素的post要么如此复杂的输入啊喂。。。</p>

<p>这是一个零基础在octopress下，用各种手段发可爱的post的心路历程，只当学习吐槽了。
找了半天终于找到了markdown语法文档，也就是octopress默认生成的post文件所使用的解析方法了。
（<a href="http://daringfireball.net/projects/markdown/">http://daringfireball.net/projects/markdown/</a> ）
英文渣暂且一边看一遍挑有用的列一列。</p>

<!--more-->


<p>1、首先是换行，so easy 文本里两个回车（空一行）自动换行，和latex一样嘛</p>

<p>2、发高亮代码，和网上众多教程一样对代码高亮支持很好用法也简单：</p>

<p>效果拔群：</p>

<div>
  <pre><code class='ruby'>def show
  @widget = Widget(params[:id])
  respond_to do |format|
    format.html # show.html.erb
    format.json { render json: @widget }
  end
end</code></pre>
</div>


<p>3、插入链接：
&hellip;</p>

<p>（咳，双线程，一遍研究c++ 一遍研究octopress 写得比较慢。。。）</p>
]]></content>
  </entry>
  
</feed>
